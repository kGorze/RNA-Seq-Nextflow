name: CI
# This workflow runs the RNA-Seq Nextflow pipeline with a test dataset

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test Pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install numpy biopython pandas matplotlib seaborn scikit-learn
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify Docker configuration
        run: |
          docker info
          docker version
          echo "Docker daemon is running and configured"

      - name: Cache Docker images
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install Nextflow
        run: |
          wget -qO- https://get.nextflow.io | bash
          chmod +x nextflow
          sudo mv nextflow /usr/local/bin/

      - name: Pull Docker images
        run: |
          # Pull R base container first
          docker pull quay.io/biocontainers/r-base:4.1.0
          
          # Pull other containers
          docker pull quay.io/biocontainers/fastqc:0.11.9--0
          docker pull quay.io/biocontainers/multiqc:1.12--pyhdfd78af_0
          docker pull quay.io/biocontainers/trimmomatic:0.39--hdfd78af_2
          docker pull quay.io/biocontainers/star:2.7.9a--h9ee0642_0
          docker pull quay.io/biocontainers/salmon:1.5.2--h84f40af_0
          docker pull quay.io/biocontainers/subread:2.0.1--hed695b0_0
          docker pull quay.io/biocontainers/bioconductor-deseq2:1.32.0--r41h399db7b_0
          
          # Verify all images were pulled successfully
          docker images | grep "quay.io/biocontainers/"

      - name: Generate test data
        run: |
          mkdir -p test_data
          # Generate test FASTQ files
          python3 -c "
          import gzip
          import random
          
          # Function to generate random DNA sequence
          def random_dna(length):
              return ''.join(random.choice('ACGT') for _ in range(length))
          
          # Function to generate FASTQ entry
          def generate_fastq_entry(read_id, seq, qual_score=30):
              quality = chr(33 + qual_score) * len(seq)
              return f'@{read_id}\\n{seq}\\n+\\n{quality}\\n'
          
          # Generate paired-end reads for two samples
          for sample_id in [1, 2]:
              # Create R1 file
              with gzip.open(f'test_data/sample{sample_id}_R1.fastq.gz', 'wt') as r1:
                  for i in range(1000):  # 1000 reads per sample
                      seq = random_dna(100)
                      r1.write(generate_fastq_entry(f'READ_{sample_id}_{i}', seq))
              
              # Create R2 file
              with gzip.open(f'test_data/sample{sample_id}_R2.fastq.gz', 'wt') as r2:
                  for i in range(1000):  # 1000 reads per sample
                      seq = random_dna(100)
                      r2.write(generate_fastq_entry(f'READ_{sample_id}_{i}', seq))
          "
          
          # Generate a small test genome
          python3 -c "
          import random
          
          # Function to generate random DNA sequence
          def random_dna(length):
              return ''.join(random.choice('ACGT') for _ in range(length))
          
          # Create a small genome with 3 chromosomes
          with open('test_data/test_genome.fa', 'w') as genome:
              for chrom in range(1, 4):
                  genome.write(f'>chr{chrom}\\n')
                  # Each chromosome is 10kb
                  seq = random_dna(10000)
                  # Write sequence in lines of 80 characters
                  for i in range(0, len(seq), 80):
                      genome.write(seq[i:i+80] + '\\n')
          "
          
          # Generate a test GTF annotation
          python3 -c "
          import random
          
          # Create a test GTF annotation
          with open('test_data/test_annotation.gtf', 'w') as gtf:
              # Header
              gtf.write('##description: Test annotation for RNA-Seq pipeline\\n')
              gtf.write('#!genome-build Test\\n')
              
              # Create 10 genes with 2 transcripts each
              for gene_id in range(1, 11):
                  chrom = random.randint(1, 3)
                  strand = random.choice(['+', '-'])
                  gene_start = random.randint(1000, 9000)
                  gene_end = gene_start + random.randint(500, 1000)
                  
                  # Gene entry
                  gtf.write(f'chr{chrom}\\ttest\\tgene\\t{gene_start}\\t{gene_end}\\t.\\t{strand}\\t.\\t')
                  gtf.write(f'gene_id \"gene{gene_id}\"; gene_name \"Gene{gene_id}\";\\n')
                  
                  # Create 2 transcripts for each gene
                  for transcript_id in range(1, 3):
                      tx_id = f\"{gene_id}_{transcript_id}\"
                      tx_start = gene_start
                      tx_end = gene_end
                      
                      # Transcript entry
                      gtf.write(f'chr{chrom}\\ttest\\ttranscript\\t{tx_start}\\t{tx_end}\\t.\\t{strand}\\t.\\t')
                      gtf.write(f'gene_id \"gene{gene_id}\"; transcript_id \"tx{tx_id}\"; gene_name \"Gene{gene_id}\";\\n')
                      
                      # Create 3-5 exons for each transcript
                      num_exons = random.randint(3, 5)
                      exon_start = tx_start
                      
                      for exon_id in range(1, num_exons + 1):
                          exon_length = random.randint(100, 200)
                          exon_end = exon_start + exon_length
                          
                          if exon_end > tx_end:
                              exon_end = tx_end
                          
                          # Exon entry
                          gtf.write(f'chr{chrom}\\ttest\\texon\\t{exon_start}\\t{exon_end}\\t.\\t{strand}\\t.\\t')
                          gtf.write(f'gene_id \"gene{gene_id}\"; transcript_id \"tx{tx_id}\"; exon_id \"exon{tx_id}_{exon_id}\"; gene_name \"Gene{gene_id}\";\\n')
                          
                          exon_start = exon_end + random.randint(50, 100)
                          if exon_start >= tx_end:
                              break
          "
          
          # Create design and contrasts files
          echo "sample_id,condition" > test_data/design.csv
          echo "sample1,control" >> test_data/design.csv
          echo "sample2,treatment" >> test_data/design.csv
          
          echo "name,control,treatment" > test_data/contrasts.csv
          echo "treatment_vs_control,control,treatment" >> test_data/contrasts.csv

      - name: Run pipeline with test data
        run: |
          nextflow run main.nf \
            -profile test,docker \
            --reads 'test_data/sample*_R{1,2}.fastq.gz' \
            --genome 'test_data/test_genome.fa' \
            --gtf 'test_data/test_annotation.gtf' \
            --design 'test_data/design.csv' \
            --contrasts 'test_data/contrasts.csv' \
            --outdir './results' \
            --max_cpus 2 \
            --max_memory '4.GB'

      - name: Check pipeline results
        run: |
          # Check if results directory exists
          if [ ! -d "./results" ]; then
            echo "Results directory not found!"
            exit 1
          fi
          
          # Check for key output files
          expected_files=(
            "fastqc"
            "multiqc"
            "trimmed"
            "star"
            "salmon"
            "featurecounts"
            "deseq2"
            "final_report"
          )
          
          for file in "${expected_files[@]}"; do
            if [ ! -d "./results/$file" ]; then
              echo "Expected output directory $file not found!"
              exit 1
            fi
          done
          
          echo "All expected output directories found!"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-results
          path: |
            results/final_report
            results/multiqc
            results/deseq2
            work/pipeline_info*
